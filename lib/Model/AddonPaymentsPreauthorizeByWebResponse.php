<?php
/**
 * AddonPaymentsPreauthorizeByWebResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MarketPay\Model;

use \ArrayAccess;
use \MarketPay\ObjectSerializer;

/**
 * AddonPaymentsPreauthorizeByWebResponse Class Doc Comment
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddonPaymentsPreauthorizeByWebResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddonPaymentsPreauthorizeByWebResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'preauthorization_id' => 'string',
        'url' => 'string',
        'amount' => 'int',
        'auto_settle_flag' => 'string',
        'card_payment_button' => 'string',
        'currency' => 'string',
        'hpp_lang' => 'string',
        'merchant_id' => 'string',
        'merchant_response_url' => 'string',
        'order_id' => 'string',
        'sha1_hash' => 'string',
        'time_stamp' => 'string',
        'comment1' => 'string',
        'comment2' => 'string',
        'var_ref' => 'string',
        'prod_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'preauthorization_id' => null,
        'url' => null,
        'amount' => 'int64',
        'auto_settle_flag' => null,
        'card_payment_button' => null,
        'currency' => null,
        'hpp_lang' => null,
        'merchant_id' => null,
        'merchant_response_url' => null,
        'order_id' => null,
        'sha1_hash' => null,
        'time_stamp' => null,
        'comment1' => null,
        'comment2' => null,
        'var_ref' => null,
        'prod_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'preauthorization_id' => 'PreauthorizationId',
        'url' => 'Url',
        'amount' => 'Amount',
        'auto_settle_flag' => 'AutoSettleFlag',
        'card_payment_button' => 'CardPaymentButton',
        'currency' => 'Currency',
        'hpp_lang' => 'HppLang',
        'merchant_id' => 'MerchantId',
        'merchant_response_url' => 'MerchantResponseUrl',
        'order_id' => 'OrderId',
        'sha1_hash' => 'Sha1Hash',
        'time_stamp' => 'TimeStamp',
        'comment1' => 'Comment1',
        'comment2' => 'Comment2',
        'var_ref' => 'VarRef',
        'prod_id' => 'ProdId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'preauthorization_id' => 'setPreauthorizationId',
        'url' => 'setUrl',
        'amount' => 'setAmount',
        'auto_settle_flag' => 'setAutoSettleFlag',
        'card_payment_button' => 'setCardPaymentButton',
        'currency' => 'setCurrency',
        'hpp_lang' => 'setHppLang',
        'merchant_id' => 'setMerchantId',
        'merchant_response_url' => 'setMerchantResponseUrl',
        'order_id' => 'setOrderId',
        'sha1_hash' => 'setSha1Hash',
        'time_stamp' => 'setTimeStamp',
        'comment1' => 'setComment1',
        'comment2' => 'setComment2',
        'var_ref' => 'setVarRef',
        'prod_id' => 'setProdId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'preauthorization_id' => 'getPreauthorizationId',
        'url' => 'getUrl',
        'amount' => 'getAmount',
        'auto_settle_flag' => 'getAutoSettleFlag',
        'card_payment_button' => 'getCardPaymentButton',
        'currency' => 'getCurrency',
        'hpp_lang' => 'getHppLang',
        'merchant_id' => 'getMerchantId',
        'merchant_response_url' => 'getMerchantResponseUrl',
        'order_id' => 'getOrderId',
        'sha1_hash' => 'getSha1Hash',
        'time_stamp' => 'getTimeStamp',
        'comment1' => 'getComment1',
        'comment2' => 'getComment2',
        'var_ref' => 'getVarRef',
        'prod_id' => 'getProdId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['preauthorization_id'] = isset($data['preauthorization_id']) ? $data['preauthorization_id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['auto_settle_flag'] = isset($data['auto_settle_flag']) ? $data['auto_settle_flag'] : null;
        $this->container['card_payment_button'] = isset($data['card_payment_button']) ? $data['card_payment_button'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['hpp_lang'] = isset($data['hpp_lang']) ? $data['hpp_lang'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['merchant_response_url'] = isset($data['merchant_response_url']) ? $data['merchant_response_url'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['sha1_hash'] = isset($data['sha1_hash']) ? $data['sha1_hash'] : null;
        $this->container['time_stamp'] = isset($data['time_stamp']) ? $data['time_stamp'] : null;
        $this->container['comment1'] = isset($data['comment1']) ? $data['comment1'] : null;
        $this->container['comment2'] = isset($data['comment2']) ? $data['comment2'] : null;
        $this->container['var_ref'] = isset($data['var_ref']) ? $data['var_ref'] : null;
        $this->container['prod_id'] = isset($data['prod_id']) ? $data['prod_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets preauthorization_id
     *
     * @return string
     */
    public function getPreauthorizationId()
    {
        return $this->container['preauthorization_id'];
    }

    /**
     * Sets preauthorization_id
     *
     * @param string $preauthorization_id preauthorization_id
     *
     * @return $this
     */
    public function setPreauthorizationId($preauthorization_id)
    {
        $this->container['preauthorization_id'] = $preauthorization_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets auto_settle_flag
     *
     * @return string
     */
    public function getAutoSettleFlag()
    {
        return $this->container['auto_settle_flag'];
    }

    /**
     * Sets auto_settle_flag
     *
     * @param string $auto_settle_flag auto_settle_flag
     *
     * @return $this
     */
    public function setAutoSettleFlag($auto_settle_flag)
    {
        $this->container['auto_settle_flag'] = $auto_settle_flag;

        return $this;
    }

    /**
     * Gets card_payment_button
     *
     * @return string
     */
    public function getCardPaymentButton()
    {
        return $this->container['card_payment_button'];
    }

    /**
     * Sets card_payment_button
     *
     * @param string $card_payment_button card_payment_button
     *
     * @return $this
     */
    public function setCardPaymentButton($card_payment_button)
    {
        $this->container['card_payment_button'] = $card_payment_button;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets hpp_lang
     *
     * @return string
     */
    public function getHppLang()
    {
        return $this->container['hpp_lang'];
    }

    /**
     * Sets hpp_lang
     *
     * @param string $hpp_lang hpp_lang
     *
     * @return $this
     */
    public function setHppLang($hpp_lang)
    {
        $this->container['hpp_lang'] = $hpp_lang;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets merchant_response_url
     *
     * @return string
     */
    public function getMerchantResponseUrl()
    {
        return $this->container['merchant_response_url'];
    }

    /**
     * Sets merchant_response_url
     *
     * @param string $merchant_response_url merchant_response_url
     *
     * @return $this
     */
    public function setMerchantResponseUrl($merchant_response_url)
    {
        $this->container['merchant_response_url'] = $merchant_response_url;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets sha1_hash
     *
     * @return string
     */
    public function getSha1Hash()
    {
        return $this->container['sha1_hash'];
    }

    /**
     * Sets sha1_hash
     *
     * @param string $sha1_hash sha1_hash
     *
     * @return $this
     */
    public function setSha1Hash($sha1_hash)
    {
        $this->container['sha1_hash'] = $sha1_hash;

        return $this;
    }

    /**
     * Gets time_stamp
     *
     * @return string
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     *
     * @param string $time_stamp time_stamp
     *
     * @return $this
     */
    public function setTimeStamp($time_stamp)
    {
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets comment1
     *
     * @return string
     */
    public function getComment1()
    {
        return $this->container['comment1'];
    }

    /**
     * Sets comment1
     *
     * @param string $comment1 comment1
     *
     * @return $this
     */
    public function setComment1($comment1)
    {
        $this->container['comment1'] = $comment1;

        return $this;
    }

    /**
     * Gets comment2
     *
     * @return string
     */
    public function getComment2()
    {
        return $this->container['comment2'];
    }

    /**
     * Sets comment2
     *
     * @param string $comment2 comment2
     *
     * @return $this
     */
    public function setComment2($comment2)
    {
        $this->container['comment2'] = $comment2;

        return $this;
    }

    /**
     * Gets var_ref
     *
     * @return string
     */
    public function getVarRef()
    {
        return $this->container['var_ref'];
    }

    /**
     * Sets var_ref
     *
     * @param string $var_ref var_ref
     *
     * @return $this
     */
    public function setVarRef($var_ref)
    {
        $this->container['var_ref'] = $var_ref;

        return $this;
    }

    /**
     * Gets prod_id
     *
     * @return string
     */
    public function getProdId()
    {
        return $this->container['prod_id'];
    }

    /**
     * Sets prod_id
     *
     * @param string $prod_id prod_id
     *
     * @return $this
     */
    public function setProdId($prod_id)
    {
        $this->container['prod_id'] = $prod_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


