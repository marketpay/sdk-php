<?php
/**
 * UniversalPayPayByWebPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UniversalPayPayByWebPost Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UniversalPayPayByWebPost implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UniversalPayPayByWebPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'debited_funds' => '\Swagger\Client\Model\InlineResponse2001DebitedFunds',
        'fees' => '\Swagger\Client\Model\InlineResponse2001DebitedFunds',
        'card_id' => 'string',
        'save_card' => 'bool',
        'total_discount' => 'int',
        'total_shipping' => 'int',
        'total_tax' => 'int',
        'order_items' => '\Swagger\Client\Model\V201PayInsUniversalPaypaymentswebOrderItems[]',
        'tag' => 'string',
        'credited_wallet_id' => 'string',
        'secure_mode' => 'string',
        'success_url' => 'string',
        'cancel_url' => 'string',
        'auto_return' => 'bool',
        'checkout_layout' => 'string',
        'language' => 'string',
        'customer' => '\Swagger\Client\Model\V201PayInsUniversalPaypaymentswebCustomer'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'debited_funds' => 'DebitedFunds',
        'fees' => 'Fees',
        'card_id' => 'CardId',
        'save_card' => 'SaveCard',
        'total_discount' => 'TotalDiscount',
        'total_shipping' => 'TotalShipping',
        'total_tax' => 'TotalTax',
        'order_items' => 'OrderItems',
        'tag' => 'Tag',
        'credited_wallet_id' => 'CreditedWalletId',
        'secure_mode' => 'SecureMode',
        'success_url' => 'SuccessUrl',
        'cancel_url' => 'CancelUrl',
        'auto_return' => 'AutoReturn',
        'checkout_layout' => 'CheckoutLayout',
        'language' => 'Language',
        'customer' => 'Customer'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'debited_funds' => 'setDebitedFunds',
        'fees' => 'setFees',
        'card_id' => 'setCardId',
        'save_card' => 'setSaveCard',
        'total_discount' => 'setTotalDiscount',
        'total_shipping' => 'setTotalShipping',
        'total_tax' => 'setTotalTax',
        'order_items' => 'setOrderItems',
        'tag' => 'setTag',
        'credited_wallet_id' => 'setCreditedWalletId',
        'secure_mode' => 'setSecureMode',
        'success_url' => 'setSuccessUrl',
        'cancel_url' => 'setCancelUrl',
        'auto_return' => 'setAutoReturn',
        'checkout_layout' => 'setCheckoutLayout',
        'language' => 'setLanguage',
        'customer' => 'setCustomer'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'debited_funds' => 'getDebitedFunds',
        'fees' => 'getFees',
        'card_id' => 'getCardId',
        'save_card' => 'getSaveCard',
        'total_discount' => 'getTotalDiscount',
        'total_shipping' => 'getTotalShipping',
        'total_tax' => 'getTotalTax',
        'order_items' => 'getOrderItems',
        'tag' => 'getTag',
        'credited_wallet_id' => 'getCreditedWalletId',
        'secure_mode' => 'getSecureMode',
        'success_url' => 'getSuccessUrl',
        'cancel_url' => 'getCancelUrl',
        'auto_return' => 'getAutoReturn',
        'checkout_layout' => 'getCheckoutLayout',
        'language' => 'getLanguage',
        'customer' => 'getCustomer'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SECURE_MODE_NOT_SPECIFIED = 'NotSpecified';
    const SECURE_MODE_DEFAULT = 'DEFAULT';
    const SECURE_MODE_FORCE = 'FORCE';
    const CHECKOUT_LAYOUT_IFRAME = 'IFRAME';
    const CHECKOUT_LAYOUT_REDIRECT = 'REDIRECT';
    const LANGUAGE_NOT_SPECIFIED = 'NotSpecified';
    const LANGUAGE_DE = 'DE';
    const LANGUAGE_EN = 'EN';
    const LANGUAGE_DA = 'DA';
    const LANGUAGE_ES = 'ES';
    const LANGUAGE_ET = 'ET';
    const LANGUAGE_FI = 'FI';
    const LANGUAGE_FR = 'FR';
    const LANGUAGE_EL = 'EL';
    const LANGUAGE_HU = 'HU';
    const LANGUAGE_IT = 'IT';
    const LANGUAGE_NL = 'NL';
    const LANGUAGE_NO = 'NO';
    const LANGUAGE_PL = 'PL';
    const LANGUAGE_PT = 'PT';
    const LANGUAGE_SK = 'SK';
    const LANGUAGE_SV = 'SV';
    const LANGUAGE_CS = 'CS';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSecureModeAllowableValues()
    {
        return [
            self::SECURE_MODE_NOT_SPECIFIED,
            self::SECURE_MODE_DEFAULT,
            self::SECURE_MODE_FORCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCheckoutLayoutAllowableValues()
    {
        return [
            self::CHECKOUT_LAYOUT_IFRAME,
            self::CHECKOUT_LAYOUT_REDIRECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_NOT_SPECIFIED,
            self::LANGUAGE_DE,
            self::LANGUAGE_EN,
            self::LANGUAGE_DA,
            self::LANGUAGE_ES,
            self::LANGUAGE_ET,
            self::LANGUAGE_FI,
            self::LANGUAGE_FR,
            self::LANGUAGE_EL,
            self::LANGUAGE_HU,
            self::LANGUAGE_IT,
            self::LANGUAGE_NL,
            self::LANGUAGE_NO,
            self::LANGUAGE_PL,
            self::LANGUAGE_PT,
            self::LANGUAGE_SK,
            self::LANGUAGE_SV,
            self::LANGUAGE_CS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debited_funds'] = isset($data['debited_funds']) ? $data['debited_funds'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['save_card'] = isset($data['save_card']) ? $data['save_card'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['total_shipping'] = isset($data['total_shipping']) ? $data['total_shipping'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['credited_wallet_id'] = isset($data['credited_wallet_id']) ? $data['credited_wallet_id'] : null;
        $this->container['secure_mode'] = isset($data['secure_mode']) ? $data['secure_mode'] : null;
        $this->container['success_url'] = isset($data['success_url']) ? $data['success_url'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['auto_return'] = isset($data['auto_return']) ? $data['auto_return'] : null;
        $this->container['checkout_layout'] = isset($data['checkout_layout']) ? $data['checkout_layout'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['order_items'] === null) {
            $invalid_properties[] = "'order_items' can't be null";
        }
        if ($this->container['credited_wallet_id'] === null) {
            $invalid_properties[] = "'credited_wallet_id' can't be null";
        }
        $allowed_values = ["NotSpecified", "DEFAULT", "FORCE"];
        if (!in_array($this->container['secure_mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'secure_mode', must be one of 'NotSpecified', 'DEFAULT', 'FORCE'.";
        }

        $allowed_values = ["IFRAME", "REDIRECT"];
        if (!in_array($this->container['checkout_layout'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'checkout_layout', must be one of 'IFRAME', 'REDIRECT'.";
        }

        $allowed_values = ["NotSpecified", "DE", "EN", "DA", "ES", "ET", "FI", "FR", "EL", "HU", "IT", "NL", "NO", "PL", "PT", "SK", "SV", "CS"];
        if (!in_array($this->container['language'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'language', must be one of 'NotSpecified', 'DE', 'EN', 'DA', 'ES', 'ET', 'FI', 'FR', 'EL', 'HU', 'IT', 'NL', 'NO', 'PL', 'PT', 'SK', 'SV', 'CS'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['order_items'] === null) {
            return false;
        }
        if ($this->container['credited_wallet_id'] === null) {
            return false;
        }
        $allowed_values = ["NotSpecified", "DEFAULT", "FORCE"];
        if (!in_array($this->container['secure_mode'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["IFRAME", "REDIRECT"];
        if (!in_array($this->container['checkout_layout'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NotSpecified", "DE", "EN", "DA", "ES", "ET", "FI", "FR", "EL", "HU", "IT", "NL", "NO", "PL", "PT", "SK", "SV", "CS"];
        if (!in_array($this->container['language'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets debited_funds
     * @return \Swagger\Client\Model\InlineResponse2001DebitedFunds
     */
    public function getDebitedFunds()
    {
        return $this->container['debited_funds'];
    }

    /**
     * Sets debited_funds
     * @param \Swagger\Client\Model\InlineResponse2001DebitedFunds $debited_funds
     * @return $this
     */
    public function setDebitedFunds($debited_funds)
    {
        $this->container['debited_funds'] = $debited_funds;

        return $this;
    }

    /**
     * Gets fees
     * @return \Swagger\Client\Model\InlineResponse2001DebitedFunds
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     * @param \Swagger\Client\Model\InlineResponse2001DebitedFunds $fees
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets card_id
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     * @param string $card_id
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets save_card
     * @return bool
     */
    public function getSaveCard()
    {
        return $this->container['save_card'];
    }

    /**
     * Sets save_card
     * @param bool $save_card
     * @return $this
     */
    public function setSaveCard($save_card)
    {
        $this->container['save_card'] = $save_card;

        return $this;
    }

    /**
     * Gets total_discount
     * @return int
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     * @param int $total_discount
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets total_shipping
     * @return int
     */
    public function getTotalShipping()
    {
        return $this->container['total_shipping'];
    }

    /**
     * Sets total_shipping
     * @param int $total_shipping
     * @return $this
     */
    public function setTotalShipping($total_shipping)
    {
        $this->container['total_shipping'] = $total_shipping;

        return $this;
    }

    /**
     * Gets total_tax
     * @return int
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     * @param int $total_tax
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets order_items
     * @return \Swagger\Client\Model\V201PayInsUniversalPaypaymentswebOrderItems[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     * @param \Swagger\Client\Model\V201PayInsUniversalPaypaymentswebOrderItems[] $order_items
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag Custom data that you can add to this item
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets credited_wallet_id
     * @return string
     */
    public function getCreditedWalletId()
    {
        return $this->container['credited_wallet_id'];
    }

    /**
     * Sets credited_wallet_id
     * @param string $credited_wallet_id The ID of the wallet where money will be credited
     * @return $this
     */
    public function setCreditedWalletId($credited_wallet_id)
    {
        $this->container['credited_wallet_id'] = $credited_wallet_id;

        return $this;
    }

    /**
     * Gets secure_mode
     * @return string
     */
    public function getSecureMode()
    {
        return $this->container['secure_mode'];
    }

    /**
     * Sets secure_mode
     * @param string $secure_mode
     * @return $this
     */
    public function setSecureMode($secure_mode)
    {
        $allowed_values = array('NotSpecified', 'DEFAULT', 'FORCE');
        if (!is_null($secure_mode) && (!in_array($secure_mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'secure_mode', must be one of 'NotSpecified', 'DEFAULT', 'FORCE'");
        }
        $this->container['secure_mode'] = $secure_mode;

        return $this;
    }

    /**
     * Gets success_url
     * @return string
     */
    public function getSuccessUrl()
    {
        return $this->container['success_url'];
    }

    /**
     * Sets success_url
     * @param string $success_url Url to redirect the browser in case the payment is completed successfully
     * @return $this
     */
    public function setSuccessUrl($success_url)
    {
        $this->container['success_url'] = $success_url;

        return $this;
    }

    /**
     * Gets cancel_url
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     * @param string $cancel_url Url to redirect the browser in case the payment is not completed successfully
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets auto_return
     * @return bool
     */
    public function getAutoReturn()
    {
        return $this->container['auto_return'];
    }

    /**
     * Sets auto_return
     * @param bool $auto_return Defaults to false (show thank you page) Forced to true for iframe
     * @return $this
     */
    public function setAutoReturn($auto_return)
    {
        $this->container['auto_return'] = $auto_return;

        return $this;
    }

    /**
     * Gets checkout_layout
     * @return string
     */
    public function getCheckoutLayout()
    {
        return $this->container['checkout_layout'];
    }

    /**
     * Sets checkout_layout
     * @param string $checkout_layout Omit to redirect browser
     * @return $this
     */
    public function setCheckoutLayout($checkout_layout)
    {
        $allowed_values = array('IFRAME', 'REDIRECT');
        if (!is_null($checkout_layout) && (!in_array($checkout_layout, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'checkout_layout', must be one of 'IFRAME', 'REDIRECT'");
        }
        $this->container['checkout_layout'] = $checkout_layout;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Valid values are ES, EN, FR
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowed_values = array('NotSpecified', 'DE', 'EN', 'DA', 'ES', 'ET', 'FI', 'FR', 'EL', 'HU', 'IT', 'NL', 'NO', 'PL', 'PT', 'SK', 'SV', 'CS');
        if (!is_null($language) && (!in_array($language, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'language', must be one of 'NotSpecified', 'DE', 'EN', 'DA', 'ES', 'ET', 'FI', 'FR', 'EL', 'HU', 'IT', 'NL', 'NO', 'PL', 'PT', 'SK', 'SV', 'CS'");
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets customer
     * @return \Swagger\Client\Model\V201PayInsUniversalPaypaymentswebCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param \Swagger\Client\Model\V201PayInsUniversalPaypaymentswebCustomer $customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


