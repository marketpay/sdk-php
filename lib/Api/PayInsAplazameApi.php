<?php
/**
 * PayInsAplazameApi
 * PHP version 5
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MarketPay\Api;

use \MarketPay\ApiClient;
use \MarketPay\ApiException;
use \MarketPay\Configuration;
use \MarketPay\ObjectSerializer;

/**
 * PayInsAplazameApi Class Doc Comment
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayInsAplazameApi
{
    /**
     * API Client
     *
     * @var \MarketPay\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \MarketPay\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\MarketPay\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \MarketPay\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \MarketPay\ApiClient $apiClient set the API client
     *
     * @return PayInsAplazameApi
     */
    public function setApiClient(\MarketPay\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation payInsAplazameAplazameGetPayment
     *
     * -------
     *
     * @param string $pay_in_id ------ (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AplazamePayInsResponse
     */
    public function payInsAplazameAplazameGetPayment($pay_in_id)
    {
        list($response) = $this->payInsAplazameAplazameGetPaymentWithHttpInfo($pay_in_id);
        return $response;
    }

    /**
     * Operation payInsAplazameAplazameGetPaymentWithHttpInfo
     *
     * -------
     *
     * @param string $pay_in_id ------ (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AplazamePayInsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAplazameAplazameGetPaymentWithHttpInfo($pay_in_id)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_in_id when calling payInsAplazameAplazameGetPayment');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsAplazame/payments/{PayInId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                "{" . "PayInId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_in_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AplazamePayInsResponse',
                '/v2.01/PayInsAplazame/payments/{PayInId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AplazamePayInsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AplazamePayInsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAplazameAplazamePostPaymentByWeb
     *
     * --------
     *
     * @param \MarketPay\Model\AplazamePayByWebPost $aplazame_pay_in ------------ (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AplazamePayByWebResponse
     */
    public function payInsAplazameAplazamePostPaymentByWeb($aplazame_pay_in = null)
    {
        list($response) = $this->payInsAplazameAplazamePostPaymentByWebWithHttpInfo($aplazame_pay_in);
        return $response;
    }

    /**
     * Operation payInsAplazameAplazamePostPaymentByWebWithHttpInfo
     *
     * --------
     *
     * @param \MarketPay\Model\AplazamePayByWebPost $aplazame_pay_in ------------ (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AplazamePayByWebResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAplazameAplazamePostPaymentByWebWithHttpInfo($aplazame_pay_in = null)
    {
        // parse inputs
        $resourcePath = "/v2.01/PayInsAplazame/payments/web";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // body params
        $_tempBody = null;
        if (isset($aplazame_pay_in)) {
            $_tempBody = $aplazame_pay_in;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AplazamePayByWebResponse',
                '/v2.01/PayInsAplazame/payments/web'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AplazamePayByWebResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AplazamePayByWebResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAplazameRefund
     *
     * @param string $pay_in_id  (required)
     * @param \MarketPay\Model\AplazameRefundPaymentPost $aplazame_refund  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AplazameRefundResponse
     */
    public function payInsAplazameRefund($pay_in_id, $aplazame_refund = null)
    {
        list($response) = $this->payInsAplazameRefundWithHttpInfo($pay_in_id, $aplazame_refund);
        return $response;
    }

    /**
     * Operation payInsAplazameRefundWithHttpInfo
     *
     * @param string $pay_in_id  (required)
     * @param \MarketPay\Model\AplazameRefundPaymentPost $aplazame_refund  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AplazameRefundResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAplazameRefundWithHttpInfo($pay_in_id, $aplazame_refund = null)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_in_id when calling payInsAplazameRefund');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsAplazame/payments/{PayInId}/refunds";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                "{" . "PayInId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_in_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($aplazame_refund)) {
            $_tempBody = $aplazame_refund;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AplazameRefundResponse',
                '/v2.01/PayInsAplazame/payments/{PayInId}/refunds'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AplazameRefundResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AplazameRefundResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
