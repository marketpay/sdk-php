<?php
/**
 * KycApi
 * PHP version 5
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MarketPay\Api;

use \MarketPay\ApiClient;
use \MarketPay\ApiException;
use \MarketPay\Configuration;
use \MarketPay\ObjectSerializer;

/**
 * KycApi Class Doc Comment
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KycApi
{
    /**
     * API Client
     *
     * @var \MarketPay\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \MarketPay\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\MarketPay\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \MarketPay\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \MarketPay\ApiClient $apiClient set the API client
     *
     * @return KycApi
     */
    public function setApiClient(\MarketPay\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation kycGetLegal
     *
     * View a Legal User
     *
     * @param int $user_id The Id of a legal user (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycUserValidationLevelLegalResponse
     */
    public function kycGetLegal($user_id)
    {
        list($response) = $this->kycGetLegalWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation kycGetLegalWithHttpInfo
     *
     * View a Legal User
     *
     * @param int $user_id The Id of a legal user (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycUserValidationLevelLegalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycGetLegalWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycGetLegal');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/legal/{UserId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycUserValidationLevelLegalResponse',
                '/v2.01/Kyc/users/legal/{UserId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycUserValidationLevelLegalResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycUserValidationLevelLegalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycGetNaturaList
     *
     * List all Natural User
     *
     * @param int $page The page number of results you wish to return (optional)
     * @param int $per_page The number of results to return per page (optional)
     * @param string $first_name_contains  (optional)
     * @param string $last_name_contains  (optional)
     * @param string $id_card_contains  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\ResponseListKycUserValidationLevelNaturalResponse
     */
    public function kycGetNaturaList($page = null, $per_page = null, $first_name_contains = null, $last_name_contains = null, $id_card_contains = null)
    {
        list($response) = $this->kycGetNaturaListWithHttpInfo($page, $per_page, $first_name_contains, $last_name_contains, $id_card_contains);
        return $response;
    }

    /**
     * Operation kycGetNaturaListWithHttpInfo
     *
     * List all Natural User
     *
     * @param int $page The page number of results you wish to return (optional)
     * @param int $per_page The number of results to return per page (optional)
     * @param string $first_name_contains  (optional)
     * @param string $last_name_contains  (optional)
     * @param string $id_card_contains  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\ResponseListKycUserValidationLevelNaturalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycGetNaturaListWithHttpInfo($page = null, $per_page = null, $first_name_contains = null, $last_name_contains = null, $id_card_contains = null)
    {
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/natural";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page !== null) {
            $queryParams['Page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['Per_Page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // query params
        if ($first_name_contains !== null) {
            $queryParams['FirstName-Contains'] = $this->apiClient->getSerializer()->toQueryValue($first_name_contains);
        }
        // query params
        if ($last_name_contains !== null) {
            $queryParams['LastName-Contains'] = $this->apiClient->getSerializer()->toQueryValue($last_name_contains);
        }
        // query params
        if ($id_card_contains !== null) {
            $queryParams['IdCard-Contains'] = $this->apiClient->getSerializer()->toQueryValue($id_card_contains);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\ResponseListKycUserValidationLevelNaturalResponse',
                '/v2.01/Kyc/users/natural'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\ResponseListKycUserValidationLevelNaturalResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\ResponseListKycUserValidationLevelNaturalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycGetNatural
     *
     * View a Natural User
     *
     * @param int $user_id The Id of a natural user (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycUserValidationLevelNaturalResponse
     */
    public function kycGetNatural($user_id)
    {
        list($response) = $this->kycGetNaturalWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation kycGetNaturalWithHttpInfo
     *
     * View a Natural User
     *
     * @param int $user_id The Id of a natural user (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycUserValidationLevelNaturalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycGetNaturalWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycGetNatural');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/natural/{UserId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycUserValidationLevelNaturalResponse',
                '/v2.01/Kyc/users/natural/{UserId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycUserValidationLevelNaturalResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycUserValidationLevelNaturalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycGetValidaton
     *
     * @param int $user_id  (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycValidationUserStatusResponse
     */
    public function kycGetValidaton($user_id)
    {
        list($response) = $this->kycGetValidatonWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation kycGetValidatonWithHttpInfo
     *
     * @param int $user_id  (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycValidationUserStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycGetValidatonWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycGetValidaton');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/natural/{UserId}/validation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycValidationUserStatusResponse',
                '/v2.01/Kyc/users/natural/{UserId}/validation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycValidationUserStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycValidationUserStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycPostDocument
     *
     * Uploads a new document and uploads a file. If the document already exists it will be replaced.
     *
     * @param string $document_type  (required)
     * @param \SplFileObject $file  (required)
     * @param int $user_id  (required)
     * @param string $file_content_type Mime type of the uploaded file. This parameter overrides the type associated to the file. (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycFileUploadResponse
     */
    public function kycPostDocument($document_type, $file, $user_id, $file_content_type = null)
    {
        list($response) = $this->kycPostDocumentWithHttpInfo($document_type, $file, $user_id, $file_content_type);
        return $response;
    }

    /**
     * Operation kycPostDocumentWithHttpInfo
     *
     * Uploads a new document and uploads a file. If the document already exists it will be replaced.
     *
     * @param string $document_type  (required)
     * @param \SplFileObject $file  (required)
     * @param int $user_id  (required)
     * @param string $file_content_type Mime type of the uploaded file. This parameter overrides the type associated to the file. (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycFileUploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycPostDocumentWithHttpInfo($document_type, $file, $user_id, $file_content_type = null)
    {
        // verify the required parameter 'document_type' is set
        if ($document_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_type when calling kycPostDocument');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling kycPostDocument');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycPostDocument');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/{UserId}/documents/new/{DocumentType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($document_type !== null) {
            $resourcePath = str_replace(
                "{" . "DocumentType" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_type),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['File'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['File'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        // form params
        if ($file_content_type !== null) {
            $formParams['FileContentType'] = $this->apiClient->getSerializer()->toFormValue($file_content_type);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycFileUploadResponse',
                '/v2.01/Kyc/users/{UserId}/documents/new/{DocumentType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycFileUploadResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycFileUploadResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycPostNatural
     *
     * Update a Natural User Kyc Data
     *
     * @param int $user_id The Id of a user (required)
     * @param \MarketPay\Model\KycUserNaturalPut $kyc_user_natural UserNatural Kyc detail params (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycUserValidationLevelNaturalResponse
     */
    public function kycPostNatural($user_id, $kyc_user_natural = null)
    {
        list($response) = $this->kycPostNaturalWithHttpInfo($user_id, $kyc_user_natural);
        return $response;
    }

    /**
     * Operation kycPostNaturalWithHttpInfo
     *
     * Update a Natural User Kyc Data
     *
     * @param int $user_id The Id of a user (required)
     * @param \MarketPay\Model\KycUserNaturalPut $kyc_user_natural UserNatural Kyc detail params (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycUserValidationLevelNaturalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycPostNaturalWithHttpInfo($user_id, $kyc_user_natural = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycPostNatural');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/natural/{UserId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($kyc_user_natural)) {
            $_tempBody = $kyc_user_natural;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycUserValidationLevelNaturalResponse',
                '/v2.01/Kyc/users/natural/{UserId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycUserValidationLevelNaturalResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycUserValidationLevelNaturalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycPutDocument
     *
     * Adds files to a document.
     *
     * @param string $document_type  (required)
     * @param \SplFileObject $file  (required)
     * @param int $user_id  (required)
     * @param string $file_content_type Mime type of the uploaded file. This parameter overrides the type associated to the file. (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycFileUploadResponse
     */
    public function kycPutDocument($document_type, $file, $user_id, $file_content_type = null)
    {
        list($response) = $this->kycPutDocumentWithHttpInfo($document_type, $file, $user_id, $file_content_type);
        return $response;
    }

    /**
     * Operation kycPutDocumentWithHttpInfo
     *
     * Adds files to a document.
     *
     * @param string $document_type  (required)
     * @param \SplFileObject $file  (required)
     * @param int $user_id  (required)
     * @param string $file_content_type Mime type of the uploaded file. This parameter overrides the type associated to the file. (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycFileUploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycPutDocumentWithHttpInfo($document_type, $file, $user_id, $file_content_type = null)
    {
        // verify the required parameter 'document_type' is set
        if ($document_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_type when calling kycPutDocument');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling kycPutDocument');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycPutDocument');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/{UserId}/documents/add/{DocumentType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($document_type !== null) {
            $resourcePath = str_replace(
                "{" . "DocumentType" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_type),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['File'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['File'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        // form params
        if ($file_content_type !== null) {
            $formParams['FileContentType'] = $this->apiClient->getSerializer()->toFormValue($file_content_type);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycFileUploadResponse',
                '/v2.01/Kyc/users/{UserId}/documents/add/{DocumentType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycFileUploadResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycFileUploadResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycPutLegal
     *
     * Update a Legal User
     *
     * @param int $user_id The Id of a user (required)
     * @param \MarketPay\Model\KycUserLegalPut $user_legal UserLegal Object params (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycUserValidationLevelLegalResponse
     */
    public function kycPutLegal($user_id, $user_legal = null)
    {
        list($response) = $this->kycPutLegalWithHttpInfo($user_id, $user_legal);
        return $response;
    }

    /**
     * Operation kycPutLegalWithHttpInfo
     *
     * Update a Legal User
     *
     * @param int $user_id The Id of a user (required)
     * @param \MarketPay\Model\KycUserLegalPut $user_legal UserLegal Object params (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycUserValidationLevelLegalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycPutLegalWithHttpInfo($user_id, $user_legal = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycPutLegal');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/legal/{UserId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($user_legal)) {
            $_tempBody = $user_legal;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycUserValidationLevelLegalResponse',
                '/v2.01/Kyc/users/legal/{UserId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycUserValidationLevelLegalResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycUserValidationLevelLegalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation kycPutRequest
     *
     * @param int $user_id  (required)
     * @param \MarketPay\Model\KycIdentificationRequest $validation_request  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\KycValidationRequestResponse
     */
    public function kycPutRequest($user_id, $validation_request = null)
    {
        list($response) = $this->kycPutRequestWithHttpInfo($user_id, $validation_request);
        return $response;
    }

    /**
     * Operation kycPutRequestWithHttpInfo
     *
     * @param int $user_id  (required)
     * @param \MarketPay\Model\KycIdentificationRequest $validation_request  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\KycValidationRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function kycPutRequestWithHttpInfo($user_id, $validation_request = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling kycPutRequest');
        }
        // parse inputs
        $resourcePath = "/v2.01/Kyc/users/natural/{UserId}/requestValidation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "UserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($validation_request)) {
            $_tempBody = $validation_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\KycValidationRequestResponse',
                '/v2.01/Kyc/users/natural/{UserId}/requestValidation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\KycValidationRequestResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\KycValidationRequestResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
