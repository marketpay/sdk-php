<?php
/**
 * PayInsRedsysApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * PayInsRedsysApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayInsRedsysApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PayInsRedsysApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation payInsRedsysGetPayment
     *
     * View a Redsys payment
     *
     * @param int $pay_in_id The Id of a payment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PayInsResponse
     */
    public function payInsRedsysGetPayment($pay_in_id)
    {
        list($response) = $this->payInsRedsysGetPaymentWithHttpInfo($pay_in_id);
        return $response;
    }

    /**
     * Operation payInsRedsysGetPaymentWithHttpInfo
     *
     * View a Redsys payment
     *
     * @param int $pay_in_id The Id of a payment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PayInsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsRedsysGetPaymentWithHttpInfo($pay_in_id)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_in_id when calling payInsRedsysGetPayment');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsRedsys/payments/{PayInId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                "{" . "PayInId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_in_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PayInsResponse',
                '/v2.01/PayInsRedsys/payments/{PayInId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PayInsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PayInsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsRedsysGetPreauthorization
     *
     * View a Redsys Preauthorization
     *
     * @param int $preauthorization_id The Id of a Redsys Preauthorization (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PreauthorizeResponse
     */
    public function payInsRedsysGetPreauthorization($preauthorization_id)
    {
        list($response) = $this->payInsRedsysGetPreauthorizationWithHttpInfo($preauthorization_id);
        return $response;
    }

    /**
     * Operation payInsRedsysGetPreauthorizationWithHttpInfo
     *
     * View a Redsys Preauthorization
     *
     * @param int $preauthorization_id The Id of a Redsys Preauthorization (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PreauthorizeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsRedsysGetPreauthorizationWithHttpInfo($preauthorization_id)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preauthorization_id when calling payInsRedsysGetPreauthorization');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsRedsys/preauthorizations/{PreauthorizationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                "{" . "PreauthorizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($preauthorization_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PreauthorizeResponse',
                '/v2.01/PayInsRedsys/preauthorizations/{PreauthorizationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PreauthorizeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PreauthorizeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsRedsysPostPayByWeb
     *
     * Create a Redsys PayIn Request
     *
     * @param \Swagger\Client\Model\PayByWebPost $redsys_pay_in Redsys PayIn Request Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PayByWebResponse
     */
    public function payInsRedsysPostPayByWeb($redsys_pay_in = null)
    {
        list($response) = $this->payInsRedsysPostPayByWebWithHttpInfo($redsys_pay_in);
        return $response;
    }

    /**
     * Operation payInsRedsysPostPayByWebWithHttpInfo
     *
     * Create a Redsys PayIn Request
     *
     * @param \Swagger\Client\Model\PayByWebPost $redsys_pay_in Redsys PayIn Request Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PayByWebResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsRedsysPostPayByWebWithHttpInfo($redsys_pay_in = null)
    {
        // parse inputs
        $resourcePath = "/v2.01/PayInsRedsys/payments/web";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/json-patch+json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($redsys_pay_in)) {
            $_tempBody = $redsys_pay_in;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PayByWebResponse',
                '/v2.01/PayInsRedsys/payments/web'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PayByWebResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PayByWebResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsRedsysPostPreauthorizationCancellation
     *
     * Cancels a Preauthorization
     *
     * @param int $preauthorization_id The Id of a Redsys PreauthorizationCancellation (required)
     * @param \Swagger\Client\Model\PreauthorizationCancellationPost $preauthorization_cancellation PreauthorizationCancellation Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PreauthorizationCancellationResponse
     */
    public function payInsRedsysPostPreauthorizationCancellation($preauthorization_id, $preauthorization_cancellation = null)
    {
        list($response) = $this->payInsRedsysPostPreauthorizationCancellationWithHttpInfo($preauthorization_id, $preauthorization_cancellation);
        return $response;
    }

    /**
     * Operation payInsRedsysPostPreauthorizationCancellationWithHttpInfo
     *
     * Cancels a Preauthorization
     *
     * @param int $preauthorization_id The Id of a Redsys PreauthorizationCancellation (required)
     * @param \Swagger\Client\Model\PreauthorizationCancellationPost $preauthorization_cancellation PreauthorizationCancellation Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PreauthorizationCancellationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsRedsysPostPreauthorizationCancellationWithHttpInfo($preauthorization_id, $preauthorization_cancellation = null)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preauthorization_id when calling payInsRedsysPostPreauthorizationCancellation');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsRedsys/preauthorizations/{PreauthorizationId}/cancellation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/json-patch+json']);

        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                "{" . "PreauthorizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($preauthorization_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($preauthorization_cancellation)) {
            $_tempBody = $preauthorization_cancellation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PreauthorizationCancellationResponse',
                '/v2.01/PayInsRedsys/preauthorizations/{PreauthorizationId}/cancellation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PreauthorizationCancellationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PreauthorizationCancellationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsRedsysPostPreauthorizationConfirmation
     *
     * Confirms a Preauthorization
     *
     * @param int $preauthorization_id The Id of a Redsys PreauthorizationConfirmation (required)
     * @param \Swagger\Client\Model\PreauthorizationConfirmationPost $preauthorization_confirmation PreauthorizationConfirmation Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PreauthorizationConfirmationResponse
     */
    public function payInsRedsysPostPreauthorizationConfirmation($preauthorization_id, $preauthorization_confirmation = null)
    {
        list($response) = $this->payInsRedsysPostPreauthorizationConfirmationWithHttpInfo($preauthorization_id, $preauthorization_confirmation);
        return $response;
    }

    /**
     * Operation payInsRedsysPostPreauthorizationConfirmationWithHttpInfo
     *
     * Confirms a Preauthorization
     *
     * @param int $preauthorization_id The Id of a Redsys PreauthorizationConfirmation (required)
     * @param \Swagger\Client\Model\PreauthorizationConfirmationPost $preauthorization_confirmation PreauthorizationConfirmation Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PreauthorizationConfirmationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsRedsysPostPreauthorizationConfirmationWithHttpInfo($preauthorization_id, $preauthorization_confirmation = null)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preauthorization_id when calling payInsRedsysPostPreauthorizationConfirmation');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsRedsys/preauthorizations/{PreauthorizationId}/confirmation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/json-patch+json']);

        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                "{" . "PreauthorizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($preauthorization_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($preauthorization_confirmation)) {
            $_tempBody = $preauthorization_confirmation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PreauthorizationConfirmationResponse',
                '/v2.01/PayInsRedsys/preauthorizations/{PreauthorizationId}/confirmation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PreauthorizationConfirmationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PreauthorizationConfirmationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsRedsysPostPreauthorizeByWeb
     *
     * Create a Redsys Preauthorization Request
     *
     * @param \Swagger\Client\Model\PreauthorizeByWebPost $redsys_preauthorization RedsysPreauthorization Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PreauthorizeByWebResponse
     */
    public function payInsRedsysPostPreauthorizeByWeb($redsys_preauthorization = null)
    {
        list($response) = $this->payInsRedsysPostPreauthorizeByWebWithHttpInfo($redsys_preauthorization);
        return $response;
    }

    /**
     * Operation payInsRedsysPostPreauthorizeByWebWithHttpInfo
     *
     * Create a Redsys Preauthorization Request
     *
     * @param \Swagger\Client\Model\PreauthorizeByWebPost $redsys_preauthorization RedsysPreauthorization Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PreauthorizeByWebResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsRedsysPostPreauthorizeByWebWithHttpInfo($redsys_preauthorization = null)
    {
        // parse inputs
        $resourcePath = "/v2.01/PayInsRedsys/preauthorizations/web";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/json-patch+json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($redsys_preauthorization)) {
            $_tempBody = $redsys_preauthorization;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PreauthorizeByWebResponse',
                '/v2.01/PayInsRedsys/preauthorizations/web'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PreauthorizeByWebResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PreauthorizeByWebResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsRedsysPostRefund
     *
     * Create a Redsys Payment Refund
     *
     * @param int $pay_in_id The Id of a PayIn (required)
     * @param \Swagger\Client\Model\RefundPost $redsys_refund Refund Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RefundResponse
     */
    public function payInsRedsysPostRefund($pay_in_id, $redsys_refund = null)
    {
        list($response) = $this->payInsRedsysPostRefundWithHttpInfo($pay_in_id, $redsys_refund);
        return $response;
    }

    /**
     * Operation payInsRedsysPostRefundWithHttpInfo
     *
     * Create a Redsys Payment Refund
     *
     * @param int $pay_in_id The Id of a PayIn (required)
     * @param \Swagger\Client\Model\RefundPost $redsys_refund Refund Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RefundResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsRedsysPostRefundWithHttpInfo($pay_in_id, $redsys_refund = null)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_in_id when calling payInsRedsysPostRefund');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsRedsys/payments/{PayInId}/refunds";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/json-patch+json']);

        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                "{" . "PayInId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_in_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($redsys_refund)) {
            $_tempBody = $redsys_refund;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RefundResponse',
                '/v2.01/PayInsRedsys/payments/{PayInId}/refunds'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RefundResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RefundResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
