<?php
/**
 * PayInsAddonPaymentsApi
 * PHP version 5
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MarketPay\Api;

use \MarketPay\ApiClient;
use \MarketPay\ApiException;
use \MarketPay\Configuration;
use \MarketPay\ObjectSerializer;

/**
 * PayInsAddonPaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayInsAddonPaymentsApi
{
    /**
     * API Client
     *
     * @var \MarketPay\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \MarketPay\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\MarketPay\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \MarketPay\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \MarketPay\ApiClient $apiClient set the API client
     *
     * @return PayInsAddonPaymentsApi
     */
    public function setApiClient(\MarketPay\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPayment
     *
     * @param int $pay_in_id  (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AddonPaymentsPayInsResponse
     */
    public function payInsAddonPaymentsAddonPaymentsGetPayment($pay_in_id)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsGetPaymentWithHttpInfo($pay_in_id);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPaymentWithHttpInfo
     *
     * @param int $pay_in_id  (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AddonPaymentsPayInsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsGetPaymentWithHttpInfo($pay_in_id)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_in_id when calling payInsAddonPaymentsAddonPaymentsGetPayment');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsAddonPayments/payments/{PayInId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                "{" . "PayInId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_in_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AddonPaymentsPayInsResponse',
                '/v2.01/PayInsAddonPayments/payments/{PayInId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AddonPaymentsPayInsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AddonPaymentsPayInsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPreauthorization
     *
     * @param int $preauthorization_id  (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AddonPaymentsPreauthorizeResponse
     */
    public function payInsAddonPaymentsAddonPaymentsGetPreauthorization($preauthorization_id)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsGetPreauthorizationWithHttpInfo($preauthorization_id);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPreauthorizationWithHttpInfo
     *
     * @param int $preauthorization_id  (required)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsGetPreauthorizationWithHttpInfo($preauthorization_id)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preauthorization_id when calling payInsAddonPaymentsAddonPaymentsGetPreauthorization');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                "{" . "PreauthorizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($preauthorization_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AddonPaymentsPreauthorizeResponse',
                '/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AddonPaymentsPreauthorizeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AddonPaymentsPreauthorizeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPaymentByWeb
     *
     * @param string $x_webhook  (optional)
     * @param \MarketPay\Model\AddonPaymentsPayByWebPost $addon_payments_pay_in  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AddonPaymentsPayByWebResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPaymentByWeb($x_webhook = null, $addon_payments_pay_in = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPaymentByWebWithHttpInfo($x_webhook, $addon_payments_pay_in);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPaymentByWebWithHttpInfo
     *
     * @param string $x_webhook  (optional)
     * @param \MarketPay\Model\AddonPaymentsPayByWebPost $addon_payments_pay_in  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AddonPaymentsPayByWebResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPaymentByWebWithHttpInfo($x_webhook = null, $addon_payments_pay_in = null)
    {
        // parse inputs
        $resourcePath = "/v2.01/PayInsAddonPayments/payments/web";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // header params
        if ($x_webhook !== null) {
            $headerParams['X-Webhook'] = $this->apiClient->getSerializer()->toHeaderValue($x_webhook);
        }
        // body params
        $_tempBody = null;
        if (isset($addon_payments_pay_in)) {
            $_tempBody = $addon_payments_pay_in;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AddonPaymentsPayByWebResponse',
                '/v2.01/PayInsAddonPayments/payments/web'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AddonPaymentsPayByWebResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AddonPaymentsPayByWebResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWeb
     *
     * @param \MarketPay\Model\AddonPaymentsPreauthorizeByWebPost $addon_payments_preauthorization  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWeb($addon_payments_preauthorization = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebWithHttpInfo($addon_payments_preauthorization);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebWithHttpInfo
     *
     * @param \MarketPay\Model\AddonPaymentsPreauthorizeByWebPost $addon_payments_preauthorization  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebWithHttpInfo($addon_payments_preauthorization = null)
    {
        // parse inputs
        $resourcePath = "/v2.01/PayInsAddonPayments/preauthorizations/web";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // body params
        $_tempBody = null;
        if (isset($addon_payments_preauthorization)) {
            $_tempBody = $addon_payments_preauthorization;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse',
                '/v2.01/PayInsAddonPayments/preauthorizations/web'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellation
     *
     * @param int $preauthorization_id  (required)
     * @param \MarketPay\Model\AddonPaymentsPreauthorizationCancellationPost $addon_payments_preauthorization_cancellation  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellation($preauthorization_id, $addon_payments_preauthorization_cancellation = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_cancellation);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationWithHttpInfo
     *
     * @param int $preauthorization_id  (required)
     * @param \MarketPay\Model\AddonPaymentsPreauthorizationCancellationPost $addon_payments_preauthorization_cancellation  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_cancellation = null)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preauthorization_id when calling payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellation');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}/cancellation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                "{" . "PreauthorizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($preauthorization_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($addon_payments_preauthorization_cancellation)) {
            $_tempBody = $addon_payments_preauthorization_cancellation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse',
                '/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}/cancellation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmation
     *
     * @param int $preauthorization_id  (required)
     * @param \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationPost $addon_payments_preauthorization_confirmation  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmation($preauthorization_id, $addon_payments_preauthorization_confirmation = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_confirmation);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationWithHttpInfo
     *
     * @param int $preauthorization_id  (required)
     * @param \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationPost $addon_payments_preauthorization_confirmation  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_confirmation = null)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preauthorization_id when calling payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmation');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}/confirmation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                "{" . "PreauthorizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($preauthorization_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($addon_payments_preauthorization_confirmation)) {
            $_tempBody = $addon_payments_preauthorization_confirmation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse',
                '/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}/confirmation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostRefund
     *
     * @param int $pay_in_id  (required)
     * @param \MarketPay\Model\AddonPaymentsRefundPost $addon_payments_refund  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return \MarketPay\Model\AddonPaymentsRefundResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostRefund($pay_in_id, $addon_payments_refund = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostRefundWithHttpInfo($pay_in_id, $addon_payments_refund);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostRefundWithHttpInfo
     *
     * @param int $pay_in_id  (required)
     * @param \MarketPay\Model\AddonPaymentsRefundPost $addon_payments_refund  (optional)
     * @throws \MarketPay\ApiException on non-2xx response
     * @return array of \MarketPay\Model\AddonPaymentsRefundResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostRefundWithHttpInfo($pay_in_id, $addon_payments_refund = null)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_in_id when calling payInsAddonPaymentsAddonPaymentsPostRefund');
        }
        // parse inputs
        $resourcePath = "/v2.01/PayInsAddonPayments/payments/{PayInId}/refunds";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                "{" . "PayInId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_in_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($addon_payments_refund)) {
            $_tempBody = $addon_payments_refund;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MarketPay\Model\AddonPaymentsRefundResponse',
                '/v2.01/PayInsAddonPayments/payments/{PayInId}/refunds'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MarketPay\Model\AddonPaymentsRefundResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\AddonPaymentsRefundResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MarketPay\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
